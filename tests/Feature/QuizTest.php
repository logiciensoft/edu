<?php

namespace Tests\Feature;

use App\Quiz;
use App\User;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class QuizTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @var TestCase
     */
    private $http;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        \Artisan::call('passport:install');

        $user = factory(User::class)->create();

        $client = DB::table('oauth_clients')
            ->where('password_client', 1)
            ->first();

        $response = $this->post('/oauth/token',
            [
                'grant_type' => 'password',
                'client_id' => $client->id,
                'client_secret' => $client->secret,
                'username' => $user->email,
                'password' => 'secret'
            ]);

        $access_token = json_decode($response->content(), 1)['access_token'];

        $this->http = $this->withHeaders([
            'Authorization' => 'Bearer '.$access_token,
            'Accept' => 'application/json'
        ]);
    }

    /** @test  */
    public function can_list_all_quizzes()
    {
        factory(Quiz::class, 3)->create();

        $response = $this->http->get('/api/quizzes');

        $response->assertStatus(200);
        $response->assertJsonCount(3);
    }

    /** @test  */
    public function can_create_a_new_quiz()
    {
        $record = [
            'name' => '1st Evaluation',
            'questions' => [
                [
                    "question" => "What is the fastest car in the world?",
                    "responses" => ["Lamborgnini", "Mercedes", "Trotro"]
                ]
            ]
        ];

        $response = $this->http->post('/api/quizzes', $record);

        $response->assertStatus(201);
        $response->assertJson(['name' => '1st Evaluation']);
    }

    /** @test  */
    public function can_get_an_existing_quiz_details()
    {
        $quiz = factory(Quiz::class)->create();

        $response = $this->http->get("/api/quizzes/{$quiz->id}");

        $response->assertStatus(200);

        $response->assertJson($quiz->toArray());
    }

    /** @test  */
    public function can_update_an_existing_quiz()
    {
        $quiz = factory(Quiz::class)->create();

        $record = [
            'name' => '2nd Evaluation',
            'questions' => [
                [
                    "question" => "What is the fastest car in the world?",
                    "responses" => ["Lamborgnini", "Mercedes", "Trotro"]
                ]
            ]
        ];

        $response = $this->http->put("/api/quizzes/{$quiz->id}", $record);

        $response->assertStatus(200);
        $response->assertJson(['name' => '2nd Evaluation']);
    }

    /** @test  */
    public function can_delete_an_existing_quiz()
    {
        $quiz = factory(Quiz::class)->create();

        $response = $this->http->delete("/api/quizzes/{$quiz->id}");

        $response->assertStatus(200);
        $this->assertEmpty(Quiz::find($quiz->id));
    }
}
